// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
         //import
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract UniqueToken is ERC20, ERC20Burnable, Ownable {
    string[] public arr;

    constructor() ERC20("Degen", "DGN") {
        arr = ["Custom Position 1", "Custom Position 2", "Custom Position 3"];
    }

    function redeem(uint256 _position, uint256 _price) public payable {
        require(_position < arr.length, "Invalid position");
        require(balanceOf(msg.sender) >= _price, "Insufficient balance");
        _burn(_msgSender(), _price);
        
    }

    function transfer(address _beneficiary, uint256 _price) public override returns (bool) {
        require(_price > 0, "Price should be greater than zero.");
        _transfer(_msgSender(), _beneficiary, _price);
       
        return true;
    }

    function mint(address _beneficiary, uint256 _amount) external onlyOwner {
        _mint(_beneficiary, _amount);
        
    }

    function checkBalance(address account) external view returns (uint256) {
        return balanceOf(account);
       
    }
}
